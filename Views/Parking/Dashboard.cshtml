@model Geex.Models.DashboardViewModel
@{
    ViewData["Title"] = "Parking Dashboard";
}

<div class="container-fluid">
    <!-- Error Alert -->
    @if (ViewData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
            <strong>Error!</strong> @ViewData["Error"]
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    <!-- Loading Indicator -->
    <div id="loadingIndicator" class="text-center d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <p>Updating dashboard data...</p>
    </div>
    
    <div class="row">
        <!-- Total Spaces Card -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Spaces</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalSpaces">@ViewData["TotalSpaces"]</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-car fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Available Spaces Card -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Available Spaces</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="availableSpaces">@ViewData["AvailableSpaces"]</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Occupied Spaces Card -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Occupied Spaces</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="occupiedSpaces">@ViewData["OccupiedSpaces"]</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-car-side fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Today's Revenue Card -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Today's Revenue</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="todayRevenue">$@ViewData["TodayRevenue"]</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Export Button -->
    <div class="row mb-4">
        <div class="col-12">
            <a href="@Url.Action("ExportDashboardData", "Parking")" class="btn btn-sm btn-primary">
                <i class="fas fa-download fa-sm text-white-50"></i> Export Report
            </a>
            <button id="refreshDashboard" class="btn btn-sm btn-info">
                <i class="fas fa-sync fa-sm text-white-50"></i> Refresh Data
            </button>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <!-- Hourly Occupancy Chart -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Hourly Occupancy Rate</h6>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="occupancyChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Vehicle Type Distribution Chart -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Vehicle Types Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie pt-4">
                        <canvas id="vehicleTypeChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Activity and Notifications -->
    <div class="row">
        <!-- Recent Activity Table -->
        <div class="col-lg-8">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Recent Parking Activity</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" width="100%" cellspacing="0" id="activityTable">
                            <thead>
                                <tr>
                                    <th>Vehicle Number</th>
                                    <th>Entry Time</th>
                                    <th>Exit Time</th>
                                    <th>Duration</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (ViewData["RecentActivity"] is List<object> recentActivities)
                                {
                                    foreach (var activity in recentActivities)
                                    {
                                        var parkingActivity = activity as Geex.Models.ParkingActivityViewModel;
                                        if (parkingActivity != null)
                                        {
                                            <tr>
                                                <td>@parkingActivity.VehicleNumber</td>
                                                <td>@parkingActivity.EntryTime.ToString("MM/dd/yyyy HH:mm")</td>
                                                <td>@(parkingActivity.ExitTime?.ToString("MM/dd/yyyy HH:mm") ?? "-")</td>
                                                <td>@parkingActivity.Duration</td>
                                                <td>$@parkingActivity.Amount</td>
                                                <td><span class="badge badge-@(parkingActivity.Status == "Completed" ? "success" : "warning")">@parkingActivity.Status</span></td>
                                            </tr>
                                        }
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="6" class="text-center">No recent activity found</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Notifications Card -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Live Notifications</h6>
                </div>
                <div class="card-body">
                    <div id="notificationsArea" class="notification-area" style="height: 300px; overflow-y: auto;">
                        <p class="text-center text-muted">No recent notifications</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // Chart objects
        let occupancyChart;
        let vehicleTypeChart;
        
        // Hourly Occupancy Chart
        var occupancyData = @Json.Serialize(ViewData["HourlyOccupancy"]);
        var occupancyCtx = document.getElementById('occupancyChart').getContext('2d');
        occupancyChart = new Chart(occupancyCtx, {
            type: 'line',
            data: {
                labels: occupancyData.Labels,
                datasets: [{
                    label: 'Occupied Spaces',
                    data: occupancyData.Data,
                    borderColor: '#4e73df',
                    backgroundColor: 'rgba(78, 115, 223, 0.05)',
                    tension: 0.3
                }]
            },
            options: {
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        // Vehicle Type Distribution Chart
        var distributionData = @Json.Serialize(ViewData["VehicleTypeDistribution"]);
        var distributionCtx = document.getElementById('vehicleTypeChart').getContext('2d');
        vehicleTypeChart = new Chart(distributionCtx, {
            type: 'doughnut',
            data: {
                labels: distributionData.Labels,
                datasets: [{
                    data: distributionData.Data,
                    backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e']
                }]
            },
            options: {
                maintainAspectRatio: false,
                plugins: {
                    legend: { position: 'bottom' }
                }
            }
        });
        
        // SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/parkingHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();
            
        // Start connection
        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
                addNotification("Dashboard connected for real-time updates", "info");
            } catch (err) {
                console.log(err);
                setTimeout(startConnection, 5000);
            }
        }
        
        // Add notification to the notification area
        function addNotification(message, type = "primary") {
            const notificationsArea = document.getElementById('notificationsArea');
            
            // Clear "no notifications" message if present
            if (notificationsArea.querySelector('.text-muted')) {
                notificationsArea.innerHTML = '';
            }
            
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show mb-2 py-2`;
            notification.innerHTML = `
                ${message}
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <small class="d-block text-right">${new Date().toLocaleTimeString()}</small>
            `;
            
            notificationsArea.prepend(notification);
            
            // Limit notifications to 10
            const notifications = notificationsArea.querySelectorAll('.alert');
            if (notifications.length > 10) {
                notificationsArea.removeChild(notifications[notifications.length - 1]);
            }
        }
        
        // Update dashboard with new data
        function updateDashboard(data) {
            document.getElementById('loadingIndicator').classList.add('d-none');
            
            // Update counters
            document.getElementById('totalSpaces').innerText = data.totalSpaces;
            document.getElementById('availableSpaces').innerText = data.availableSpaces;
            document.getElementById('occupiedSpaces').innerText = data.totalSpaces - data.availableSpaces;
            document.getElementById('todayRevenue').innerText = '$' + data.dailyRevenue;
            
            // Update charts if new data is available
            if (data.hourlyOccupancy && data.hourlyOccupancy.length > 0) {
                updateOccupancyChart(data.hourlyOccupancy);
            }
            
            // We would update activity table here as well in a complete implementation
        }
        
        // Update occupancy chart
        function updateOccupancyChart(hourlyData) {
            const labels = hourlyData.map(item => item.hour);
            const data = hourlyData.map(item => item.occupancyPercentage);
            
            occupancyChart.data.labels = labels;
            occupancyChart.data.datasets[0].data = data;
            occupancyChart.update();
        }
        
        // Refresh dashboard manually
        document.getElementById('refreshDashboard').addEventListener('click', function() {
            document.getElementById('loadingIndicator').classList.remove('d-none');
            fetch('@Url.Action("Dashboard", "Parking")', { 
                headers: { 
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                updateDashboard(data);
                addNotification("Dashboard data refreshed", "success");
            })
            .catch(error => {
                document.getElementById('loadingIndicator').classList.add('d-none');
                addNotification("Error refreshing dashboard data", "danger");
                console.error('Error:', error);
            });
        });
        
        // SignalR event handlers
        connection.on("ReceiveDashboardUpdate", (data) => {
            updateDashboard(data);
            addNotification("Dashboard data updated", "success");
        });
        
        connection.on("VehicleEntryNotification", (vehicleNumber) => {
            addNotification(`Vehicle ${vehicleNumber} has entered the parking lot`, "success");
        });
        
        connection.on("VehicleExitNotification", (vehicleNumber) => {
            addNotification(`Vehicle ${vehicleNumber} has exited the parking lot`, "warning");
        });
        
        // Start SignalR connection
        startConnection();
    </script>
}